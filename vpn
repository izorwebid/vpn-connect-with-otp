#!/bin/bash

# === CONFIG ===
VPN_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_DIR="$VPN_DIR/configs"
ICON_PATH="$VPN_DIR/assets/vpn.icns"
ENV="$1"
ENV_UPPER=$(echo "$ENV" | tr '[:lower:]' '[:upper:]')
LOG_FILE=""
RETRY_LIMIT=3
OPENVPN_PID=""
RECONNECT_COUNT=0
EXITING=false
LAST_IP_FILE="$VPN_DIR/last_ip.txt"

# === Ambil IP Public ===
get_public_ip() {
  curl -s ifconfig.me || echo "0.0.0.0"
}


# === Setup log file name berdasarkan tanggal sekarang ===
setup_log_file() {
  # Nama file log untuk hari ini
  local today_log="$VPN_DIR/vpn-$(date +%Y%m%d).log"
  
  # Jika file log hari ini belum ada, hapus semua log lama (*.log)
  if [[ ! -f "$today_log" ]]; then
    echo "[$(date +%T)] Removing old log files..." | tee -a "$VPN_DIR/cleanup.log"
    rm -f "$VPN_DIR"/vpn-*.log
  fi

  LOG_FILE="$today_log"
}

# === Notifikasi (visual, bell, dan flash) ===
notify() {
  local title="$1"
  local msg="$2"
  terminal-notifier -title "$title" -message "$msg" -appIcon "$ICON_PATH"
  echo -e "\033[?5h"; sleep 0.2; echo -e "\033[?5l"
  echo -ne "\007"
}

# === Cleanup saat Ctrl+C ===
cleanup() {
  EXITING=true
  notify "VPN" "Disconnected manually"
  echo -e "[VPN] Disconnected manually\n" | tee -a "$LOG_FILE"
  if [[ -n "$OPENVPN_PID" ]]; then
    sudo kill "$OPENVPN_PID" 2>/dev/null
  else
    sudo pkill -f "openvpn --config" 2>/dev/null
  fi
  exit 0
}
trap cleanup SIGINT

# === Load credentials dari .env ===
load_env() {
  USERNAME=$(grep "^USERNAME_${ENV_UPPER}=" "$VPN_DIR/.env" | cut -d '=' -f2-)
  PASSWORD=$(grep "^PASSWORD_${ENV_UPPER}=" "$VPN_DIR/.env" | cut -d '=' -f2-)
  SECRET=$(grep "^SECRET_${ENV_UPPER}=" "$VPN_DIR/.env" | cut -d '=' -f2-)

  if [[ -z "$USERNAME" || -z "$PASSWORD" || -z "$SECRET" ]]; then
    echo "[VPN] Missing credentials for environment: $ENV"
    exit 1
  fi
}

# === Ambil last_ip dari file untuk config tertentu ===
read_last_ip() {
  local cfg="$1"
  if [[ ! -f "$LAST_IP_FILE" ]]; then
    echo "0 0"
    return
  fi
  local line
  line=$(grep "^$cfg " "$LAST_IP_FILE")
  if [[ -z "$line" ]]; then
    echo "0 0"
  else
    # Format: ENV TIMESTAMP IP
    echo "$line" | awk '{print $2, $3}'
  fi
}

# === Update last_ip untuk config tertentu ===
update_last_ip() {
  local cfg="$1"
  local ts="$2"
  local ip="$3"
  if grep -q "^$cfg " "$LAST_IP_FILE" 2>/dev/null; then
    sed -i.bak "s|^$cfg .*|$cfg $ts $ip|" "$LAST_IP_FILE"
  else
    echo "$cfg $ts $ip" >> "$LAST_IP_FILE"
  fi
}

# === Generate OTP dan simpan auth file sementara ===
generate_auth_file() {
  local current_ip
  current_ip=$(get_public_ip)
  local last_ip last_time now expired
  read last_time last_ip < <(read_last_ip "$ENV")
  now=$(date +%s)
  expired=false
  if (( now - last_time > 10*60*60 )); then
    expired=true
  fi

  if [[ "$current_ip" == "$last_ip" && $expired == false ]]; then
    echo "[$(date +%T)] Same IP detected ($current_ip), still valid (<10h), using PASSWORD only" | tee -a "$LOG_FILE" >&2
    FINAL_PASS="$PASSWORD"
  else
    echo "[$(date +%T)] New/expired IP detected ($current_ip), generating OTP" | tee -a "$LOG_FILE" >&2
    if ! command -v oathtool &>/dev/null; then
      echo "[VPN] Missing 'oathtool'. Install with: brew install oath-toolkit" >&2
      exit 1
    fi
    OTP=$(oathtool --totp -b "$SECRET")
    FINAL_PASS="${PASSWORD}${OTP}"
    update_last_ip "$ENV" "$now" "$current_ip"
  fi

  local auth_file
  auth_file=$(mktemp)
  echo -e "$USERNAME\n$FINAL_PASS" > "$auth_file"
  chmod 600 "$auth_file"
  echo "$auth_file"
}

# === Connect VPN ===
connect_vpn() {
  setup_log_file
  notify "VPN" "Connecting to $ENV..."
  echo "[$(date +%T)] Connecting to $ENV..." | tee -a "$LOG_FILE"
  AUTH_FILE=$(generate_auth_file)

  sudo openvpn --config "$CONFIG_DIR/$ENV.ovpn" \
    --auth-user-pass "$AUTH_FILE" \
    --log /dev/stdout 2>&1 | tee -a "$LOG_FILE" &

  OPENVPN_PID=$!
  (sleep 10 && rm -f "$AUTH_FILE") &

  sleep 5
  if ifconfig | grep -q tun; then
    notify "VPN" "Connected to $ENV"
    echo "[$(date +%T)] VPN connected to $ENV" | tee -a "$LOG_FILE"
    return 0
  else
    notify "VPN" "Connection failed"
    echo "[$(date +%T)] VPN failed to connect" | tee -a "$LOG_FILE"
    return 1
  fi
}

# === Monitor VPN ===
monitor_vpn() {
  while ! $EXITING; do
    sleep 5
    setup_log_file
    if [[ "$LOG_FILE" != "$VPN_DIR/vpn-$(date +%Y%m%d).log" ]]; then
      setup_log_file
      echo "[$(date +%T)] Log file rotated to $LOG_FILE" | tee -a "$LOG_FILE"
    fi

    if ! ps -p "$OPENVPN_PID" > /dev/null 2>&1; then
      echo "[$(date +%T)] VPN process died" | tee -a "$LOG_FILE"
      if (( RECONNECT_COUNT < RETRY_LIMIT )); then
        ((RECONNECT_COUNT++))
        notify "VPN" "Connection lost, reconnect attempt $RECONNECT_COUNT/$RETRY_LIMIT"
        echo "[$(date +%T)] Reconnect attempt $RECONNECT_COUNT/$RETRY_LIMIT" | tee -a "$LOG_FILE"
        connect_vpn || continue
      else
        notify "VPN" "Failed after $RETRY_LIMIT retries, exiting."
        echo "[$(date +%T)] VPN failed after $RETRY_LIMIT retries." | tee -a "$LOG_FILE"
        exit 1
      fi
    fi
  done
}

# === MAIN ===
if [[ -z "$ENV" ]]; then
  echo "Usage: vpn [uat|prod]"
  exit 1
fi

load_env

for attempt in $(seq 1 $RETRY_LIMIT); do
  connect_vpn && break
  echo "[$(date +%T)] Retry $attempt/$RETRY_LIMIT failed." | tee -a "$LOG_FILE"
  notify "VPN" "Retry $attempt/$RETRY_LIMIT failed"
  if [[ "$attempt" -eq "$RETRY_LIMIT" ]]; then
    notify "VPN" "Failed after $RETRY_LIMIT retries."
    echo "[$(date +%T)] VPN failed after $RETRY_LIMIT retries." | tee -a "$LOG_FILE"
    exit 1
  fi
  sleep 3
done

echo "Press Ctrl+C to disconnect VPN..."
monitor_vpn